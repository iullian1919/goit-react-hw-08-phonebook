{"version":3,"file":"static/js/884.d5024734.chunk.js","mappings":"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","sources":["store/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/AddContactModal/AddContactModal.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\nexport const selectError = state => state.contacts.error;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectFilter = state => state.filter;\n","import React from 'react';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'store/contacts/operations';\nimport { selectContacts } from 'store/contacts/selectors';\nimport {\n  Button,\n  Center,\n  FormControl,\n  FormLabel,\n  Input,\n} from '@chakra-ui/react';\nimport PropTypes from 'prop-types';\n\nconst ContactForm = ({ close }) => {\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  const handleInput = ev => {\n    if (ev.target.name === 'name') {\n      setName(ev.target.value);\n      return;\n    }\n    if (ev.target.name === 'phone') {\n      setPhone(ev.target.value);\n      return;\n    }\n  };\n  const handleSubmit = ev => {\n    ev.preventDefault();\n    const newContact = {\n      name,\n      number: phone,\n    };\n    if (\n      contacts.find(\n        el => el.name.toLowerCase() === newContact.name.toLocaleLowerCase()\n      )\n    ) {\n      alert(` ${newContact.name} is already in contacts`);\n      return;\n    }\n    dispatch(addContact(newContact));\n    close();\n    ev.target.reset();\n  };\n  return (\n    <form\n      style={{\n        maxWidth: '650px',\n        marginLeft: 'auto',\n        marginRight: 'auto',\n      }}\n      onSubmit={handleSubmit}\n    >\n      <FormControl isRequired=\"true\">\n        <FormLabel>Name</FormLabel>\n        <Input required name=\"name\" type=\"text\" onInput={handleInput} />\n      </FormControl>\n      <FormControl isRequired=\"true\">\n        <FormLabel>Phone number</FormLabel>\n        <Input required name=\"phone\" type=\"phone\" onInput={handleInput} />\n      </FormControl>\n      <Center>\n        <Button colorScheme=\"blue\" mt={5} type=\"submit\">\n          Add contact\n        </Button>\n      </Center>\n    </form>\n  );\n};\n\nContactForm.propTypes = {\n  close: PropTypes.func.isRequired,\n};\n\nexport default ContactForm;\n","import React from 'react';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport {\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalCloseButton,\n  Modal,\n  ModalBody,\n} from '@chakra-ui/react';\nimport PropTypes from 'prop-types';\n\nexport function AddContactModal({ isOpen, onClose }) {\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Add Contact</ModalHeader>\n\n        <ModalBody>\n          <ModalCloseButton />\n          <ContactForm close={onClose} />\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n}\n\nAddContactModal.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n\nexport default AddContactModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'store/contacts/operations';\nimport { Button, Td, Tr } from '@chakra-ui/react';\nimport { DeleteIcon } from '@chakra-ui/icons';\n\nconst ContactsItem = ({ contact }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => {\n    dispatch(deleteContact(contact.id));\n  };\n  return (\n    <Tr>\n      <Td>{contact.name}</Td>\n      <Td>{contact.number}</Td>\n      <Td textAlign=\"right\">\n        <Button colorScheme=\"red\" onClick={handleDelete}>\n          <DeleteIcon color=\"inherit\" />\n        </Button>\n      </Td>\n    </Tr>\n  );\n};\n\nContactsItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default ContactsItem;\n","import React from 'react';\nimport ContactsItem from 'components/ContactItem/ContactItem';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts, selectFilter } from 'store/contacts/selectors';\nimport { fetchContacts } from 'store/contacts/operations';\nimport { useEffect } from 'react';\nimport {\n  Container,\n  Table,\n  TableContainer,\n  Tbody,\n  Th,\n  Thead,\n  Tr,\n} from '@chakra-ui/react';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  const filterValue = useSelector(selectFilter);\n  const createRenderListContact = () => {\n    return contacts.filter(el => {\n      return el.name.toLowerCase().includes(filterValue.toLowerCase());\n    });\n  };\n  return (\n    <Container maxW=\"1000\">\n      <TableContainer>\n        <Table>\n          <Thead>\n            <Tr bg=\"#a2b5d5\">\n              <Th>Name</Th>\n              <Th>number</Th>\n              <Th textAlign=\"right\">options</Th>\n            </Tr>\n          </Thead>\n          <Tbody>\n            {createRenderListContact().map(el => {\n              return <ContactsItem key={el.id} contact={el} />;\n            })}\n          </Tbody>\n        </Table>\n      </TableContainer>\n    </Container>\n  );\n};\n\nexport default ContactList;\n","import React from 'react';\nimport { filterUse } from 'store/contacts/filterSlice';\nimport { useDispatch } from 'react-redux';\nimport { Container, FormControl, FormLabel, Input } from '@chakra-ui/react';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const handleInput = ev => {\n    const text = ev.target.value;\n    dispatch(filterUse(text));\n  };\n  return (\n    <Container mb={15}>\n      <FormControl alignItems=\"center\">\n        <FormLabel>Find contacts by name</FormLabel>\n        <Input\n          placeholder=\"search\"\n          type=\"text\"\n          name=\"filter\"\n          onChange={handleInput}\n        />\n      </FormControl>\n    </Container>\n  );\n};\n\nexport default Filter;\n","import React from 'react';\nimport { AddIcon } from '@chakra-ui/icons';\nimport { Button, Container, useDisclosure } from '@chakra-ui/react';\nimport { AddContactModal } from 'components/AddContactModal/AddContactModal';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport Loader from 'components/Loader/Loader';\nimport { useSelector } from 'react-redux';\nimport { selectIsLoading } from 'store/contacts/selectors';\n\nexport const Contacts = () => {\n  const isLoading = useSelector(selectIsLoading);\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  return (\n    <Container pt={30} maxW=\"1000px\">\n      <Button\n        display=\"block\"\n        ml=\"auto\"\n        leftIcon={<AddIcon />}\n        colorScheme=\"blue\"\n        onClick={onOpen}\n      >\n        Add Contact\n      </Button>\n      <AddContactModal isOpen={isOpen} onClose={onClose} />\n      <h2\n        style={{\n          fontSize: '40px',\n          marginBottom: '10px',\n          textAlign: 'center',\n        }}\n      >\n        Contacts\n      </h2>\n      <Filter />\n      {isLoading && <Loader />}\n      <ContactList />\n    </Container>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectFilter","filter","_ref","close","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","phone","setPhone","useSelector","dispatch","useDispatch","handleInput","ev","target","value","_jsxs","style","maxWidth","marginLeft","marginRight","onSubmit","preventDefault","newContact","number","find","el","toLowerCase","toLocaleLowerCase","alert","concat","addContact","reset","children","FormControl","isRequired","_jsx","FormLabel","Input","required","type","onInput","Center","Button","colorScheme","mt","AddContactModal","isOpen","onClose","Modal","ModalOverlay","ModalContent","ModalHeader","ModalBody","ModalCloseButton","ContactForm","contact","Tr","Td","textAlign","onClick","deleteContact","id","DeleteIcon","color","useEffect","fetchContacts","filterValue","Container","maxW","TableContainer","Table","Thead","bg","Th","Tbody","includes","map","ContactsItem","mb","alignItems","placeholder","onChange","text","filterUse","Contacts","_useDisclosure","useDisclosure","onOpen","pt","display","ml","leftIcon","AddIcon","fontSize","marginBottom","Filter","Loader","ContactList"],"sourceRoot":""}